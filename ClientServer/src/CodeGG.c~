#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "rp.h"


int main(int argc, char **argv){

	/*number of acquision*/
	uint32_t N = 64;
	/*size of the acquisition buffer*/
	uint32_t buff_size = 16384;
	/*allocation of buffer size in memory*/
	float *buff = (float *)malloc(buff_size * sizeof(float));

	/*initialise to 0 the buffer*/
	for (int i=0 ; i<buff_size ; i++){buff[i]=0.0;}

	/* Print error, if rp_Init() function failed */
	if(rp_Init() != RP_OK){
		fprintf(stderr, "Rp api init failed!\n");
	}

 
	/* decimation n (=1,8,64...) : frequency = 125/n MHz*/
	rp_AcqSetDecimation(RP_DEC_1);

	/*init trigger state*/
	rp_acq_trig_state_t state = RP_TRIG_STATE_TRIGGERED;

	for (int i=0 ; i<N ; i++) {

		/*start acquisition must be set before trigger initiation*/
		rp_AcqStart();

		/*allocation of temporary buffer size in memory*/
		float *temp = (float *)malloc(buff_size * sizeof(float));

		/*trigger source*/
		rp_AcqSetTriggerSrc(RP_TRIG_SRC_CHB_NE);

		/*level of the trigger activation in volt*/
		rp_AcqSetTriggerLevel(-0.03); 

		/*acquisition trigger delay*/
		rp_AcqSetTriggerDelay(8000);

		/*waiting for trigger*/
		while(1){
			rp_AcqGetTriggerState(&state);
			if(state == RP_TRIG_STATE_TRIGGERED){
				break;
			}
		}		

		/*putt acquisition data in the temporary buffer*/
		rp_AcqGetOldestDataV(RP_CH_2, &buff_size, temp);

		/*additionning the N signals*/
		for (int j = 0; j < buff_size; j++){
			buff[j]+=temp[j];
		}

		/*release memory*/
		free(temp);
	}

	/*open file and write the mean signal*/
	FILE * fm;
 	fm = fopen ("moy.txt", "w+");
	fprintf(fm, "Nombre de points: %f\n", buff_size);

	for (int i=0 ; i<buff_size ; i++) {fprintf(fm, "%f\n", buff[i]/N);}
	fclose(fm);

	/* Release rp resources */
	rp_Release();

	return 0;
}
